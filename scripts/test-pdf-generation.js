#!/usr/bin/env node

/**
 * PDF ÁîüÊàêÊµãËØïËÑöÊú¨
 * ÊµãËØï‰∏çÂêåÈÖçÁΩÆ‰∏ãÁöÑ PDF ÁîüÊàê
 */

import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import fs from 'fs';

puppeteer.use(StealthPlugin());

const TEST_URL = 'https://platform.openai.com/docs/guides/prompt-engineering';
const OUTPUT_DIR = './test-pdfs';

async function testPDFGeneration() {
  let browser = null;

  try {
    console.log('\nüß™ PDF ÁîüÊàêÊµãËØï\n');

    // Á°Æ‰øùËæìÂá∫ÁõÆÂΩïÂ≠òÂú®
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    // ÊµãËØïÈÖçÁΩÆ
    const testConfigs = [
      {
        name: 'Ê†áÂáÜÈÖçÁΩÆ',
        browserOpts: {
          headless: true
        },
        pdfOpts: {
          format: 'A4',
          printBackground: true
        }
      },
      {
        name: 'ÁÆÄÂåñÈÖçÁΩÆ (Êó†ËÉåÊôØ)',
        browserOpts: {
          headless: true
        },
        pdfOpts: {
          format: 'A4',
          printBackground: false
        }
      },
      {
        name: 'Letter Ê†ºÂºè',
        browserOpts: {
          headless: true
        },
        pdfOpts: {
          format: 'Letter',
          printBackground: true
        }
      },
      {
        name: 'Êó† preferCSSPageSize',
        browserOpts: {
          headless: true
        },
        pdfOpts: {
          format: 'A4',
          printBackground: true,
          preferCSSPageSize: false
        }
      },
      {
        name: 'headless new Ê®°Âºè',
        browserOpts: {
          headless: 'new'
        },
        pdfOpts: {
          format: 'A4',
          printBackground: true
        }
      }
    ];

    for (const config of testConfigs) {
      console.log(`\nüìã ÊµãËØï: ${config.name}`);
      console.log('‚îÄ'.repeat(50));

      try {
        // ÂêØÂä®ÊµèËßàÂô®
        browser = await puppeteer.launch({
          headless: config.browserOpts.headless,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-blink-features=AutomationControlled'
          ],
          ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.setViewport({ width: 1920, height: 1080 });

        // ËÆøÈóÆÈ°µÈù¢
        console.log('‚è≥ Âä†ËΩΩÈ°µÈù¢...');
        await page.goto(TEST_URL, {
          waitUntil: 'networkidle2',
          timeout: 60000
        });

        console.log('‚úÖ È°µÈù¢Âä†ËΩΩÊàêÂäü');

        // Á≠âÂæÖÈ°µÈù¢Á®≥ÂÆö
        await new Promise(resolve => setTimeout(resolve, 2000));

        // ÁîüÊàê PDF
        const fileName = `test-${testConfigs.indexOf(config)}-${config.name.replace(/\s+/g, '-')}.pdf`;
        const outputPath = `${OUTPUT_DIR}/${fileName}`;

        console.log('‚è≥ ÁîüÊàê PDF...');

        const pdfOpts = {
          ...config.pdfOpts,
          path: outputPath
        };

        await page.pdf(pdfOpts);

        // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
        if (fs.existsSync(outputPath)) {
          const stats = fs.statSync(outputPath);
          console.log(`‚úÖ PDF ÁîüÊàêÊàêÂäü: ${outputPath}`);
          console.log(`   Êñá‰ª∂Â§ßÂ∞è: ${(stats.size / 1024).toFixed(2)} KB`);
        } else {
          console.log('‚ùå PDF Êñá‰ª∂‰∏çÂ≠òÂú®');
        }

        await browser.close();
        browser = null;

      } catch (error) {
        console.log(`‚ùå ÊµãËØïÂ§±Ë¥•: ${error.message}`);
        if (browser) {
          await browser.close();
          browser = null;
        }
      }
    }

    console.log('\n‚ú® ÊµãËØïÂÆåÊàêÔºÅ\n');
    console.log('ÁîüÊàêÁöÑ PDF Êñá‰ª∂:');
    const files = fs.readdirSync(OUTPUT_DIR);
    files.forEach(file => {
      const stats = fs.statSync(`${OUTPUT_DIR}/${file}`);
      console.log(`  - ${file} (${(stats.size / 1024).toFixed(2)} KB)`);
    });

  } catch (error) {
    console.error('\n‚ùå ÊµãËØïÂ§±Ë¥•:', error.message);
    console.error(error.stack);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

testPDFGeneration().catch(console.error);
